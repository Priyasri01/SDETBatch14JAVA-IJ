
Method Overriding:
     Method overriding allows us to have same  methods in parent and child classes.
Why we should override a method?
    1) when we inherit from a class everything other than private methods and constructors is inherited if we
    don't like any method from the parent we can override.
    2) it helps us achieve polymorphism.
    3) it's more flexibility for the child class creater also, for example if we have 10 method and we like 8 method so reuse it , the other two method  we can override it ,
    so basically  we can have our own implemention , which won't affect the other subclass.
what is the syntax to override a method:
    1) First there must be a parent child relationship.
    2) In the child class just redefine(change) the body of  method.
Type casting in objects:
    As we can type cast in the primitive data types we can also type cast objects.
    like storing the object of a child class in a variable of parent type.
Why we should type cast objects?
    with the help of type casting we can start storing the objects of child classes in an array of type parent.
what is the syntax to type cast?
    its same as primitive type caseting for example if we have an animal class and animal class has a child class Cat
    we can do
    Animal animal=new Cat();
    parent classname[] arr={new childclass name()}
polymorphism:
 by using polymorphism a  method can  take on many forms/behaviour based on the object or the parameters that we pass
    to the method.
    polymorphism in Java allows us to perform the same action in many different ways.
Types of polymorphism:
    There are two types of polymorphism. 1) compile time/static/early binding or run time/dynamic or late binding.
   -  When we use method overloading to achieve polymorphism it is called compile time polymorphism//static/early binding:
    Run time/
    -  When we use method overriding to achieve polymorphism then it is called Run time polymorphism/dynamic or late binding:

final Keyword:
    final keyword is just like any other keyword in java like class package void etc.
    There are three man uses of final keyword.
    1) If we use final keyword with a class no other class can inherit from that class.
    2) If we use it with a method name no child class can override that method.
    3) If we use it a field once the value has been assigned to that field no one can change it value afterwards.

============================================================================================

Abstraction:

Abstract Method:
-only will declartion but no definition/implementation


-Abstraction Class
    - if it abstract class, then we can't  create the object.
    -class contains atleast one Abstract Method.(Meaning one abstract method and normal method)
    -Implementation of Abstract method will be written in derived class(subclass).

 -Concrete class
    -in concrete class Object can be instantiated/created
    -class contains complete definition for all methods.

