what is Collections in java:

Any group of individual objects which are represented as a single unit is known as the collection of the objects. In Java,
a separate framework named the “Collection Framework” has been defined in JDK 1.2 which holds all the collection classes and interface in it.

note: The Collection interface (java.util.Collection) and Map interface (java.util.Map) are the two main “root” interfaces of Java collection classes.



What is a Framework?
A framework is a set of classes and interfaces which provide a ready-made architecture.
 In order to implement a new feature or a class, there is no need to define a framework.
However, an optimal object-oriented design always includes a framework with a collection of classes such that all the classes perform the same kind of task.

What is collection Framework in java?
Java Collection Framework is a collection of interfaces and classes which help in storing and processing the data efficiently.
Collection framework in java provides an ready-made architecture to store and manipulate the group of objects that represented as a single unit.
This framework has several useful classes which have tons of useful functions which makes a programmer task super easy
Collection Framework” has been defined in JDK 1.2 which holds all the collection classes and interface in it.


Java collection was non-generic before JDK 1.5.Since 1.5, it is generic.
Java new generic collection allows you to have only one type of object in the
collection.  Now it is type safe so typecasting is not required at run time. meaning it will give compiler error if we are not storing same data type when we intialize the value.

ex: for generic Arraylist example
ArrayList<String> al = new ArrayList<>();
al.add("peter");
al.add(10); //you will get compiler error. because you created this arraylist for String data type .so u have to create only string data type.

ex:for non- generic Arraylist example
ArrayList al = new ArrayList();
al.add("peter");
al.add(10);
// System.out.println(((String)names.get(1).length());// you will not  get compiler error. because you created this arraylist for any data type .maining u can store any data type. but u will get runtime error. becuase index 1 carry int value and u are asking for the lenth(), this method is not applicable for int data type.

General problem in Array is:

1)Array is fixed in size.so in run time we can't decrese or increase. Arrays are not grouable in nature, which means we can't inc or dec in rumtime.
2)homegenous.in array we can store only homogeneous data only, which means same data type.
3)they don't have any under line data structure. so,we don't have any ready made method, so if we want any operation on array then we have create logic




Different between Array and collection

Array                                                   collection(---)
1)fixed size                                                 -Growable in nature
2)Arrays can hold homogenous/same data  type                            -it' can hold Homogenous & Hetrogenous data
3)Their is no underlaying data structure.                       -Implement underlaying data structure, ready made methods are available.
so,ready made method is not available.

==================================================================================================================
Collection Framework:
The collection framework contains multiple interfaces  where every interface is used to store a specific type of data. The following are the interfaces present in the framework.

1) Iterable Interface: This is the root interface for the entire collection framework. The collection interface extends the iterable interface. Therefore, inherently, all the interfaces and classes implement this interface.
 The main functionality of this interface is to provide an iterator for the collections. Therefore, this interface contains only one abstract method which is the iterator.

2)Collection(I):
Collection Interface: This interface extends the iterable interface and is implemented by all the classes in the collection framework.
This interface contains all the basic methods which every collection has like adding the data into the collection, removing the data, clearing the data, etc.
 All these methods are implemented in this interface because these methods are implemented by all the classes irrespective of their style of implementation.
 And also, having these methods in this interface ensures that the names of the methods are universal for all the collections.
 Therefore, in short, we can say that this interface builds a foundation on which the collection classes are implemented.
The collection interface is used to representing group of objects as a single entity and which contains a common methods which are required for other collections.
so most of the times the methods which are defined inside the collection interface are common across all the collection classes.



Collection interface is base/parent interface, which has the below child interface.

List(I)
Set(I)
Queau(I)

1)list Interface:
-list(I) is child interface of the collection interface.
-we can use this list Interface, when Insertion order should be preserved, it should allow duplicate.then we want to go for list interface concept.
- This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects.
ShortAns:-basically when we want all the collection of the object or elements   are in order , and when want have the same object(allow duplicate) then we can go for list interface.
what are the classes available which are implemented this list interface.
list interface implemented by using a different classes. and they are

    1)Array List
    -in Arraylist elements are store in consequent order like 0 1 2 3 4 ..so on
    -we can preferred ArrayList  when we want to  retrieving elements/objects.
   - if we want delete and insert more elements/object  then we are not suppose to perfer the Array list. Because it will take time  for shifting.

    2)linkedList:
       -in linkedlist every elements/object are called as node. node are not store in consequete order, but each elements are linked with elements address(each node carry three parts previous address, elements and next address.)
      -when ever we have insertion and delete operation , then we can go for linkedlist.
      -we are not suppose to perfer linkedList class when we want to retrieve the elements,because it will navigate through out the  node, so it take time.
      -linked list class will implement both  list(I)and DQueue intrterface.
      -we can preferred linkelist when  we want to insertion and delete elements /objects.
      -LinkedList carry same method what we have in ArrayList, beucase both are implementing the same parent interface(listInterface). but along with these method, it has addtional mehtod those are come from Dqueue interface they are
     follows the FIFO or the First-In-First-Out principle --this is Queue concerpt
     follows the  FILO or the First-In-last-Out principle ---this is stack concept.

    3)vector
    4)stack
    5)Abstract list class
    6)Abstract Sequential list class

2)Set(I) :
-Set(I) is child interface of the collection interface.
-Insertion order not preserved
-duplication are not allowed.
-In this case(above) we have to go for Set Interface concept.

what are the classes available which are implemented this set interface.
Set interface implemented by using a different classes. and they are
    -HashSet
    -linkedHashSet


3)Queue(I)
The Queue interface is present in java.util package.
-Queue(I) is child interface of the collection interface.
-It is used to hold the elements about to be processed in FIFO(First In First Out) order.
-it follows the FIFO or the First-In-First-Out principle.

what are the classes available which are implemented this Queue(I).

Set interface implemented by using a different classes. and most commons are
-Priority Queue
-Linked list.




Collections(class):
Short Ans: it's actually predefined class from java.util package , so the collections is a class which is present inside the java.util packaga.
Collections class is one of the utility classes in Java Collections Framework.
The java.util package contains the Collections class.
Collections class is basically used with the static methods that operate on the collections or return the collection.
All the methods of this class throw the NullPointerException if the collection or object passed to the methods is null.

Syntax: Declaration

What basically collections class contains?

it's contains certains methods and these method we can use for collection objects.

===============================================
Encapsulation:
making a field as private, and creating a setter and getter method for those  field is called encapsulation.
Encapsulation is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates.
Encapsulation is one of the four fundamental OOP concepts.
Encapsulation is achieved in java language by class concept.
Combining of state and behavior in a single container is known as encapsulation.
In encapsulation, the variables of a class will be hidden from other classes and can be accessed
only through the methods of their current class. Therefore, it is also known as data hiding

Advantage of Encapsulation:
The main advantage of using of encapsulation is to secure the data from other methods, when we
make a data private then these data only use within the class, but these data not accessible outside the class.

To achieve encapsulation in Java
● Declare the variables of a class as private.
● Provide public setter and getter methods to modify and view the variables values.
Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables.
It is more defined with the setter and getter method.
Benefits of Encapsulation
● The fields of a class can be made read-only
or write-only.
● A class can have total control over what is
stored in its fields.
===============================================================================================================================
Advantages of Encapsulation:

Data Hiding:
it is a way of restricting the access of our data members by hiding the implementation details. Encapsulation also provides a way for data hiding.
The user will have no idea about the inner implementation of the class. It will not be visible to the user how the class is storing values in the variables.
The user will only know that we are passing the values to a setter method and variables are getting initialized with that value.
Increased Flexibility:
 We can make the variables of the class read-only or write-only depending on our requirement.
 If we wish to make the variables read-only then we have to omit the setter methods like setName(), setAge(), etc.
 from the above program or if we wish to make the variables write-only then we have to omit the get methods like getName(), getAge(), etc. from the above program

Reusability:
 Encapsulation also improves the re-usability and is easy to change with new requirements.
Testing code is easy:
 Encapsulated code is easy to test for unit testing.

==================================================================================================================
 -Getter and Setter make the programmer convenient in setting and getting the value for a particular data type.
 - In both getter and setter, the first letter of the variable should be capital.
 --Getter and Setter are methods used to protect your data and make your code more secure.

Different between getter and setter:
setter:
While Setter sets or updates the value (mutators).
 It sets the value for any variable used in a class’s programs.
 and starts with the word “set” followed by the variable name.
 Setter method always return type is void.

Getter:
-Getter returns the value (accessors), it returns the value of data type int, String, double, float, etc.
-For the program’s convenience, getter starts with the word “get” followed by the variable name.
 =================================================================================================================================
 what is mean by "assign the values using setter methods ?
 -means create a setter method for each field and call these method inside the constructor  to assign the value to each method  by passing the argument inside the parameter.
 -assigning means-->